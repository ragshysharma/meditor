; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	H:\MinGW\home\other\meditor2\Libs\7z\7zCrc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_g_CrcTable:DWORD:0100H
_DATA	ENDS
PUBLIC	@CrcGenerateTable@0
; Function compile flags: /Ogtp
; File h:\mingw\home\other\meditor2\libs\7z\7zcrc.c
;	COMDAT @CrcGenerateTable@0
_TEXT	SEGMENT
@CrcGenerateTable@0 PROC				; COMDAT

; 13   :   UInt32 i;
; 14   :   for (i = 0; i < 256; i++)

	xor	edx, edx
$LL6@:

; 15   :   {
; 16   :     UInt32 r = i;
; 17   :     int j;
; 18   :     for (j = 0; j < 8; j++)
; 19   :       r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));

	mov	eax, edx
	and	eax, 1
	dec	eax
	not	eax
	and	eax, -306674912				; edb88320H
	mov	ecx, edx
	shr	ecx, 1
	xor	eax, ecx
	mov	ecx, eax
	and	ecx, 1
	dec	ecx
	not	ecx
	and	ecx, -306674912				; edb88320H
	shr	eax, 1
	xor	ecx, eax
	mov	eax, ecx
	and	eax, 1
	dec	eax
	shr	ecx, 1
	not	eax
	and	eax, -306674912				; edb88320H
	xor	eax, ecx
	mov	ecx, eax
	and	ecx, 1
	dec	ecx
	not	ecx
	and	ecx, -306674912				; edb88320H
	shr	eax, 1
	xor	ecx, eax
	mov	eax, ecx
	and	eax, 1
	dec	eax
	shr	ecx, 1
	not	eax
	and	eax, -306674912				; edb88320H
	xor	eax, ecx
	mov	ecx, eax
	and	ecx, 1
	dec	ecx
	not	ecx
	and	ecx, -306674912				; edb88320H
	shr	eax, 1
	xor	ecx, eax
	mov	eax, ecx
	and	eax, 1
	dec	eax
	shr	ecx, 1
	not	eax
	and	eax, -306674912				; edb88320H
	xor	eax, ecx
	mov	ecx, eax
	and	ecx, 1
	dec	ecx
	not	ecx
	and	ecx, -306674912				; edb88320H
	shr	eax, 1
	xor	ecx, eax

; 20   :     g_CrcTable[i] = r;

	mov	DWORD PTR _g_CrcTable[edx*4], ecx
	inc	edx
	cmp	edx, 256				; 00000100H
	jb	$LL6@

; 21   :   }
; 22   : }

	ret	0
@CrcGenerateTable@0 ENDP
_TEXT	ENDS
PUBLIC	@CrcUpdate@12
; Function compile flags: /Ogtp
;	COMDAT @CrcUpdate@12
_TEXT	SEGMENT
_size$ = 8						; size = 4
@CrcUpdate@12 PROC					; COMDAT
; _v$ = ecx
; _data$ = edx

; 25   : {

	push	ebp
	mov	ebp, esp
	mov	eax, ecx

; 26   :   const Byte *p = (const Byte *)data;
; 27   :   for (; size > 0 ; size--, p++)

	mov	ecx, DWORD PTR _size$[ebp]
	test	ecx, ecx
	je	SHORT $LN1@
	push	esi
	npad	3
$LL3@:

; 28   :     v = CRC_UPDATE_BYTE(v, *p);

	movzx	esi, BYTE PTR [edx]
	xor	esi, eax
	and	esi, 255				; 000000ffH
	shr	eax, 8
	xor	eax, DWORD PTR _g_CrcTable[esi*4]
	inc	edx
	dec	ecx
	jne	SHORT $LL3@
	pop	esi
$LN1@:

; 29   :   return v;
; 30   : }

	pop	ebp
	ret	4
@CrcUpdate@12 ENDP
_TEXT	ENDS
PUBLIC	@CrcCalc@8
; Function compile flags: /Ogtp
;	COMDAT @CrcCalc@8
_TEXT	SEGMENT
@CrcCalc@8 PROC						; COMDAT
; _data$ = ecx
; _size$ = edx

; 34   :   return CrcUpdate(CRC_INIT_VAL, data, size) ^ 0xFFFFFFFF;

	push	edx
	mov	edx, ecx
	or	ecx, -1
	call	@CrcUpdate@12
	not	eax

; 35   : }

	ret	0
@CrcCalc@8 ENDP
_TEXT	ENDS
END
