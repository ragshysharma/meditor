; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	H:\MinGW\home\other\meditor2\Libs\7z\Archive\7z\7zAlloc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_SzAlloc
EXTRN	_malloc:PROC
; Function compile flags: /Ogtp
; File h:\mingw\home\other\meditor2\libs\7z\archive\7z\7zalloc.c
;	COMDAT _SzAlloc
_TEXT	SEGMENT
_p$ = 8							; size = 4
_size$ = 12						; size = 4
_SzAlloc PROC						; COMDAT

; 23   : {

	push	ebp
	mov	ebp, esp

; 24   :   p = p;
; 25   :   if (size == 0)

	mov	eax, DWORD PTR _size$[ebp]
	test	eax, eax
	jne	SHORT $LN1@SzAlloc

; 32   : }

	pop	ebp
	ret	0
$LN1@SzAlloc:

; 26   :     return 0;
; 27   :   #ifdef _SZ_ALLOC_DEBUG
; 28   :   fprintf(stderr, "\nAlloc %10d bytes; count = %10d", size, g_allocCount);
; 29   :   g_allocCount++;
; 30   :   #endif
; 31   :   return malloc(size);

	push	eax
	call	_malloc
	add	esp, 4

; 32   : }

	pop	ebp
	ret	0
_SzAlloc ENDP
_TEXT	ENDS
PUBLIC	_SzFree
EXTRN	_free:PROC
; Function compile flags: /Ogtp
;	COMDAT _SzFree
_TEXT	SEGMENT
_p$ = 8							; size = 4
_address$ = 12						; size = 4
_SzFree	PROC						; COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp

; 36   :   p = p;
; 37   :   #ifdef _SZ_ALLOC_DEBUG
; 38   :   if (address != 0)
; 39   :   {
; 40   :     g_allocCount--;
; 41   :     fprintf(stderr, "\nFree; count = %10d", g_allocCount);
; 42   :   }
; 43   :   #endif
; 44   :   free(address);

	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	call	_free
	add	esp, 4

; 45   : }

	pop	ebp
	ret	0
_SzFree	ENDP
_TEXT	ENDS
PUBLIC	_SzAllocTemp
; Function compile flags: /Ogtp
;	COMDAT _SzAllocTemp
_TEXT	SEGMENT
_p$ = 8							; size = 4
_size$ = 12						; size = 4
_SzAllocTemp PROC					; COMDAT

; 48   : {

	push	ebp
	mov	ebp, esp

; 49   :   p = p;
; 50   :   if (size == 0)

	mov	eax, DWORD PTR _size$[ebp]
	test	eax, eax
	jne	SHORT $LN1@SzAllocTem

; 60   : }

	pop	ebp
	ret	0
$LN1@SzAllocTem:

; 51   :     return 0;
; 52   :   #ifdef _SZ_ALLOC_DEBUG
; 53   :   fprintf(stderr, "\nAlloc_temp %10d bytes;  count = %10d", size, g_allocCountTemp);
; 54   :   g_allocCountTemp++;
; 55   :   #ifdef _WIN32
; 56   :   return HeapAlloc(GetProcessHeap(), 0, size);
; 57   :   #endif
; 58   :   #endif
; 59   :   return malloc(size);

	push	eax
	call	_malloc
	add	esp, 4

; 60   : }

	pop	ebp
	ret	0
_SzAllocTemp ENDP
_TEXT	ENDS
PUBLIC	_SzFreeTemp
; Function compile flags: /Ogtp
;	COMDAT _SzFreeTemp
_TEXT	SEGMENT
_p$ = 8							; size = 4
_address$ = 12						; size = 4
_SzFreeTemp PROC					; COMDAT

; 63   : {

	push	ebp
	mov	ebp, esp

; 64   :   p = p;
; 65   :   #ifdef _SZ_ALLOC_DEBUG
; 66   :   if (address != 0)
; 67   :   {
; 68   :     g_allocCountTemp--;
; 69   :     fprintf(stderr, "\nFree_temp; count = %10d", g_allocCountTemp);
; 70   :   }
; 71   :   #ifdef _WIN32
; 72   :   HeapFree(GetProcessHeap(), 0, address);
; 73   :   return;
; 74   :   #endif
; 75   :   #endif
; 76   :   free(address);

	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	call	_free
	add	esp, 4

; 77   : }

	pop	ebp
	ret	0
_SzFreeTemp ENDP
_TEXT	ENDS
END
