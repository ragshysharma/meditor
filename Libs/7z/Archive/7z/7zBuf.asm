; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	H:\MinGW\home\other\meditor2\Libs\7z\7zBuf.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_Buf_Init
; Function compile flags: /Ogtp
; File h:\mingw\home\other\meditor2\libs\7z\7zbuf.c
;	COMDAT _Buf_Init
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Buf_Init PROC						; COMDAT

; 9    : {

	push	ebp
	mov	ebp, esp

; 10   :   p->data = 0;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0

; 11   :   p->size = 0;

	mov	DWORD PTR [eax+4], 0

; 12   : }

	pop	ebp
	ret	0
_Buf_Init ENDP
_TEXT	ENDS
PUBLIC	_Buf_Create
; Function compile flags: /Ogtp
;	COMDAT _Buf_Create
_TEXT	SEGMENT
_p$ = 8							; size = 4
_size$ = 12						; size = 4
_alloc$ = 16						; size = 4
_Buf_Create PROC					; COMDAT

; 15   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 16   :   p->size = 0;

	mov	esi, DWORD PTR _p$[ebp]
	push	edi

; 17   :   if (size == 0)

	mov	edi, DWORD PTR _size$[ebp]
	mov	DWORD PTR [esi+4], 0
	test	edi, edi
	jne	SHORT $LN2@Buf_Create

; 18   :   {
; 19   :     p->data = 0;

	mov	DWORD PTR [esi], edi

; 20   :     return 1;

	lea	eax, DWORD PTR [edi+1]
	pop	edi
	pop	esi

; 29   : }

	pop	ebp
	ret	0
$LN2@Buf_Create:

; 21   :   }
; 22   :   p->data = (Byte *)alloc->Alloc(alloc, size);

	mov	eax, DWORD PTR _alloc$[ebp]
	push	edi
	push	eax
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 8
	mov	DWORD PTR [esi], eax

; 23   :   if (p->data != 0)

	test	eax, eax
	je	SHORT $LN1@Buf_Create

; 24   :   {
; 25   :     p->size = size;

	mov	DWORD PTR [esi+4], edi
	pop	edi

; 26   :     return 1;

	mov	eax, 1
	pop	esi

; 29   : }

	pop	ebp
	ret	0
$LN1@Buf_Create:
	pop	edi

; 27   :   }
; 28   :   return 0;

	xor	eax, eax
	pop	esi

; 29   : }

	pop	ebp
	ret	0
_Buf_Create ENDP
_TEXT	ENDS
PUBLIC	_Buf_Free
; Function compile flags: /Ogtp
;	COMDAT _Buf_Free
_TEXT	SEGMENT
_p$ = 8							; size = 4
_alloc$ = 12						; size = 4
_Buf_Free PROC						; COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 33   :   alloc->Free(alloc, p->data);

	mov	esi, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [esi]
	push	eax
	mov	eax, DWORD PTR _alloc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	eax
	call	ecx
	add	esp, 8

; 34   :   p->data = 0;

	mov	DWORD PTR [esi], 0

; 35   :   p->size = 0;

	mov	DWORD PTR [esi+4], 0
	pop	esi

; 36   : }

	pop	ebp
	ret	0
_Buf_Free ENDP
_TEXT	ENDS
END
